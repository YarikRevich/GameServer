load("@bazel_gazelle//:def.bzl", "gazelle")

# gazelle:prefix github.com/YarikRevich/hide-seek-server
gazelle(
    name = "gazelle")

# gazelle:prefix github.com/YarikRevich/hide-seek-server
gazelle(
    name = "gazelle-update",
    args = [
        "-from_file=go.mod",
        "-to_macro=deps.bzl%go_repositories",
        "-prune",
    ],
    command = "update-repos",
)

PREPARE = """
    echo " " > $@;\
    if [[ $$OSTYPE == "darwin"* ]]; then\
        if ! which brew &> /dev/null; then\
            echo "brew" >> $@;\
        fi;\
    fi;\
    if ! which go &> /dev/null; then\
        echo "go" >> $@;\
    fi;\
    if ! which docker &> /dev/null; then\
        echo "docker" >> $@;\
    fi;\
    echo EOF >> $@;
"""

genrule(
    name = "prepare",
    outs = ["prepare.stub"],
    cmd = PREPARE,
)

INSTALL_DEPS = """
    if [[ $$OSTYPE == "linux"* ]]; then\
        apt update;\
    fi;\
    while read -r file; do \
        if [[ $$file == "brew"* ]]; then \
			/bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)";\
		fi;\
        if [[ $$file == "go"* ]]; then \
			if [[ $$OSTYPE == "linux"* ]]; then \
				add-apt-repository ppa:longsleep/golang-backports;\
        		apt-get update &> /dev/null;\
        		apt-get install golang-1.17-go -y &> /dev/null;\
			elif [[ $$OSTYPE == "darwin"* ]]; then \
				brew install go@1.17;\
			fi;\
		fi;\
        if [[ $$file == "docker"* ]]; then \
			if [[ $$OSTYPE == "linux"* ]]; then \
				apt install docker.io -y;\
			elif [[ $$OSTYPE == "darwin"* ]]; then \
				brew install docker &> /dev/null;\
        		brew install --cask docker &> /dev/null;\
        		open -a /Applications/Docker.app;\
			fi;\
		fi;\
    done < $(location //:prepare.stub);\
    echo EOF >> $@;
"""

genrule(
    name = "install_deps",
    outs = ["install_deps.stub"],
    cmd = INSTALL_DEPS,
    tools = ["//:prepare.stub"],
)

#Server 

DOCKERFILE_SERVER = """FROM golang:latest
LABEL Author="Yaroslav Svitlitskyi"
ENV DEBIAN_FRONTEND noninteractive
COPY . /go/src/hide-seek-server
WORKDIR /go/src/hide-seek-server"""

genrule(
    name = "server_dockerfile",
    cmd = "echo '%s' > $@" % DOCKERFILE_SERVER,
    outs = ["server_dockerfile.stub"],
)

genrule(
    name = "server_docker_image",
    srcs = glob(["**/*"]),
    cmd = """
        docker build -t hide-seek-server -f Dockerfile .;\
    """ % DOCKERFILE_SERVER,
    outs = ["server_docker_image.stub"],
)

BUILD = """
    docker network create hide-seek;\
    docker rm -f --restart=always $$(docker ps -q --filter="ancestor=hide-seek-server");\
    docker rm -f --restart=always $$(docker ps -q --filter="ancestor=prometheus");\
    docker rm -f --restart=always $$(docker ps -q --filter="ancestor=bazel/configs:grafana_docker_image");\
    docker run -d --restart=always --network=hide-seek --name=hide-seek-server hide-seek-server;\
	docker run -p 9090:9090 -d --restart=always --network=hide-seek --name=prometheus prometheus;\
    docker run -p 3000:3000 -d --restart=always --network=hide-seek --name=grafana bazel/configs:grafana_docker_image;\
    echo EOF >> $@;
"""

genrule(
    name = "run",
    srcs = ["//cmd:hide-seek-server"],
    tools = [
        # "//:server_docker_image",
        "//configs:grafana_docker_image",
        "//configs:prometheus_docker_image"],
    outs = ["run.stub"],
    cmd = BUILD,
)