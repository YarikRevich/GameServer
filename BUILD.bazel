load("@io_bazel_rules_docker//container:container.bzl", "container_image")
load("@bazel_gazelle//:def.bzl", "gazelle")

# gazelle:prefix github.com/YarikRevich/hide-seek-server
gazelle(
    name = "gazelle")

# gazelle:prefix github.com/YarikRevich/hide-seek-server
gazelle(
    name = "gazelle-update",
    args = [
        "-from_file=go.mod",
        "-to_macro=deps.bzl%go_repositories",
        "-prune",
    ],
    command = "update-repos",
)

PREPARE = """
    echo " " > $@;\
    if [[ $$OSTYPE == "darwin"* ]]; then\
        if ! which brew &> /dev/null; then\
            echo "brew" >> $@;\
        fi;\
    fi;\
    if ! which go &> /dev/null; then\
        echo "go" >> $@;\
    fi;\
    if ! which docker &> /dev/null; then\
        echo "docker" >> $@;\
    fi;\
    echo EOF >> $@;
"""

genrule(
    name = "prepare",
    outs = ["prepare.stub"],
    cmd = PREPARE,
)

DEPS = """
    if [[ $$OSTYPE == "linux"* ]]; then\
        apt update;\
    fi;\
    while read -r file; do \
        if [[ $$file == "brew"* ]]; then \
			/bin/bash -c "$$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)";\
		fi;\
        if [[ $$file == "go"* ]]; then \
			if [[ $$OSTYPE == "linux"* ]]; then \
				add-apt-repository ppa:longsleep/golang-backports;\
        		apt-get update &> /dev/null;\
        		apt-get install golang-1.17-go -y &> /dev/null;\
			elif [[ $$OSTYPE == "darwin"* ]]; then \
				brew install go@1.17;\
			fi;\
		fi;\
        if [[ $$file == "docker"* ]]; then \
			if [[ $$OSTYPE == "linux"* ]]; then \
				apt install docker.io -y;\
			elif [[ $$OSTYPE == "darwin"* ]]; then \
				brew install docker &> /dev/null;\
        		brew install --cask docker &> /dev/null;\
        		open -a /Applications/Docker.app;\
			fi;\
		fi;\
    done < $(location //:prepare.stub);\
    echo EOF >> $@;
"""

genrule(
    name = "deps",
    outs = ["deps.stub"],
    cmd = DEPS,
    tools = ["//:prepare.stub"],
)

SERVER_DOCKER_IMAGE_ENTRYPOINT_SCRIPT = """
	touch hide-seek-server-config;\
	cat $(location //configs:hide-seek-server-config) >> hide-seek-server-config;\
	echo "\n" >> hide-seek-server-config;\
	result="";\
	regex='^#';\
	while read -r file; do\
		if ! [[ $${file} =~ $$regex ]]; then\
        	result+="$${file} ";\
		fi;\
    done < "hide-seek-server-config";\
    echo $$result >> $@;
"""

genrule(
    name = "server_docker_image_entrypoint_script",
    cmd = SERVER_DOCKER_IMAGE_ENTRYPOINT_SCRIPT,
    tools = ["//configs:hide-seek-server-config"],
    outs = ["server_docker_image_entrypoint_script.stub"],
)

container_image(
    name = "server_docker_image",
    base = "@server_base//image",
    workdir = "/",
    entrypoint = "./hide-seek-server $(cat server_docker_image_entrypoint_script.stub)",
    files = [
        ":server_docker_image_entrypoint_script",
        "//cmd:hide-seek-server"],
)

STOP = """
	if ! [ -z $$(docker ps -q --filter="ancestor=bazel:server_docker_image") ]; then
        docker rm -f $$(docker ps -q --filter="ancestor=bazel:server_docker_image");\
	fi;
	if ! [ -z $$(docker ps -q --filter="ancestor=bazel/configs:prometheus_docker_image") ]; then
        docker rm -f $$(docker ps -q --filter="ancestor=bazel/configs:prometheus_docker_image");\
	fi;
	if ! [ -z $$(docker ps -q --filter="ancestor=bazel/configs:grafana_docker_image") ]; then
        docker rm -f $$(docker ps -q --filter="ancestor=bazel/configs:grafana_docker_image");\
	fi;
	echo EOF >> $@;
"""

genrule(
	name = "stop",
	cmd = STOP,
	outs = ["stop.stub"],
)

RUN = """  
	./$(location //:server_docker_image);\
    ./$(location //configs:grafana_docker_image);\
    ./$(location //configs:prometheus_docker_image);\
	if [ -z $$(docker network list --filter name=^hide-seek$$ --format="{{ .Name }}") ]; then\
		docker network create hide-seek;\
	fi;\
    docker run -d --restart=always --network=hide-seek --name=hide-seek-server bazel:server_docker_image;\
	docker run -p 9090:9090 -d --restart=always --network=hide-seek --name=prometheus bazel/configs:prometheus_docker_image;\
    docker run -p 3000:3000 -d --restart=always --network=hide-seek --name=grafana bazel/configs:grafana_docker_image;\
    echo EOF >> $@;
"""

genrule(
    name = "run",
	srcs = [":stop"],
    tools = [
        ":server_docker_image",
        "//configs:grafana_docker_image",
        "//configs:prometheus_docker_image",
    ],
    outs = ["run.stub"],
    cmd = RUN,
)